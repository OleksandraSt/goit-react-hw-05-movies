{"version":3,"file":"static/js/387.7bd38189.chunk.js","mappings":"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","sources":["components/Reviews/Reviews.styled.jsx","components/Reviews/Reviews.jsx","components/api/Api.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const ReviewsList = styled.ul`\n    display: flex;\n    flex-direction: column;\n    gap: 15px;\n    list-style: none;\n`\nexport const ReviewsItem = styled.li`\n  box-shadow: rgb(0 0 0 / 12%) 0px 1px 3px, rgb(0 0 0 / 14%) 0px 1px 1px,\n    rgb(0 0 0 / 20%) 0px 2px 1px;\n  border-radius: 6px;\n`\nexport const AuthorName = styled.p`\n  text-transform: uppercase;\n  font-size: 20px;\n  font-weight: 700;\n`\n\nexport const ReviewText = styled.p`\nfont-size: 20px;\n`\nexport const NoReview = styled.p`\n  text-transform: uppercase;\n  font-size: 40px;\n  font-weight: 700;\n  margin-bottom: 50px;\n`","import { getReviews } from 'components/api/Api';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport {\n  ReviewsList,\n  ReviewsItem,\n  AuthorName,\n  ReviewText,\n  NoReview,\n} from './Reviews.styled';\n\nconst Reviews = () => {\n    const [reviews, setReviews] = useState([]);\n    const { movieId } = useParams();\n    const [error, setError] = useState(null);\n  \n    useEffect(() => {\n      getReviews(movieId)\n        .then(reviews => {\n          setReviews(reviews);\n          setError(null);\n        })\n        .catch(error => {\n          setError(error);\n          setReviews([]);\n        });\n    }, [movieId]);\n  \n    if (!reviews) {\n      return;\n    }\n\n    return (\n      <div>\n        <ReviewsList>\n          {reviews.map(({ id, author, content }) => (\n            <ReviewsItem key={id}>\n              <AuthorName> Author : {author} </AuthorName>\n              <ReviewText> Review : {content} </ReviewText>\n            </ReviewsItem>\n          ))}\n        </ReviewsList>\n        {reviews.length === 0 && !error && (\n          <NoReview>There are no reviews for this movie</NoReview>\n        )}\n      </div>\n    );\n  };\n\nexport default Reviews;","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = '7651f4fc4c55634ce2fb0f6883d09fb5';\nconst TRENGING_MOVIES = '/trending/movie/day';\n\nexport const getTrendingMovies = async () => {\n    const { data } = await axios(TRENGING_MOVIES, {\n      params: {\n        api_key: API_KEY,\n      },\n    });\n\n    const moviesResult = movies => {\n        return movies.map(\n          ({ id, title, poster_path: posterPath, release_date: releaseDate }) => ({\n            id,\n            title,\n            posterPath,\n            releaseDate,\n          })\n        );\n      };\n      return moviesResult(data.results);\n    };\n\nexport const getMovieById = async movieId => {\n    const { data } = await axios(`/movie/${movieId}`, {\n          params: {\n            api_key: API_KEY,\n            language: 'en-US',\n          },\n        });\n\n    const {\n            title,\n            poster_path: posterPath,\n            release_date: releaseDate,\n            genres,\n            overview,\n            vote_average: voteAverage,\n          } = data;\n          return { title, posterPath, releaseDate, genres, overview, voteAverage };\n        };\n\nexport const getCast = async movieId => {\n  const { data } = await axios(`/movie/${movieId}/credits`, {\n    params: {\n      api_key: API_KEY,\n      language: 'en-US',\n    },\n  });\n  const actorsResult = actors => {\n    return actors.map(({ id, name, profile_path: profilePath, character }) => ({\n      id,\n      name,\n      profilePath,\n      character,\n    }));\n  };\n  return actorsResult(data.cast);\n};\n\nexport const getReviews = async movieId => {\n    const { data } = await axios(`/movie/${movieId}/reviews`, {\n      params: {\n        api_key: API_KEY,\n        language: 'en-US',\n      },\n    });\n    const reviewsResult = reviews => {\n      return reviews.map(({ id, author, content }) => ({ id, author, content }));\n    };\n    return reviewsResult(data.results);\n  };\n\nexport const getMovies = async query => {\n  const { data } = await axios.get(`/search/movie`, {\n    params: {\n      api_key: API_KEY,\n      language: 'en-US',\n      query,\n      page: 1,\n      include_adult: false,\n    },\n  });\n  const moviesResult = movies => {\n    return movies.map(\n      ({ id, title, poster_path: posterPath, release_date: releaseDate }) => ({\n        id,\n        title,\n        posterPath,\n        releaseDate,\n      })\n    );\n  };\n  return moviesResult(data.results);\n};"],"names":["ReviewsList","styled","ReviewsItem","AuthorName","ReviewText","NoReview","useState","reviews","setReviews","movieId","useParams","error","setError","useEffect","getReviews","then","catch","map","id","author","content","length","axios","API_KEY","getTrendingMovies","params","api_key","data","moviesResult","movies","title","posterPath","poster_path","releaseDate","release_date","results","getMovieById","language","genres","overview","voteAverage","vote_average","getCast","actorsResult","actors","name","profilePath","profile_path","character","cast","reviewsResult","getMovies","query","page","include_adult"],"sourceRoot":""}