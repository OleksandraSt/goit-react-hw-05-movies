{"version":3,"file":"static/js/485.8739ae86.chunk.js","mappings":"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","sources":["components/TrendingMovies/TrendingMovies.styled.jsx","components/TrendingMovies/TrendingMovies.jsx","components/api/Api.jsx","pages/Home/Home.styled.jsx","pages/Home/Home.jsx"],"sourcesContent":["import { NavLink } from \"react-router-dom\";\nimport styled from '@emotion/styled';\n\nexport const TrendingMoviesList = styled.ul`\n    display: flex;\n    flex-wrap: wrap;\n    gap: 16px;\n    list-style: none;\n    padding: 0px;\n    margin: 0px;\n    justify-content: center;\n`\nexport const TrendingMoviesItem = styled.li`\n    flex-basis: calc((100% - 60px) / 4);\n    width: 320px;\n    height: 480px;\n    border-radius: 10px;\n    transition-property: box-shadow, transform;\n    transition-duration: 200ms;\n    transition-timing-function: cubic-bezier(0.075, 0.82,  0.165, 1);\n   background: rgb(255,0,44);\n    `\nexport const TrendingMoviesImg = styled.img`\n    width:100%;\n    height: 398px;\n    object-fit: cover;\n    border-radius: 5px;\n`\nexport const TrendingMoviesText = styled.p`\n    margin: 0;\n    padding: 10px;\n    font-weight: 700;\n    text-decoration: none;\n`\nexport const TrendingMoviesData = styled.p`\n    margin:0;\n    font-weight:700;\n    text-decoration: none;\n    padding:0px 10px 0px 10px;\n`\nexport const TrendingLink = styled(NavLink)`\n    text-decoration: none;\n    color: black;\n`","import PropTypes from 'prop-types';\nimport imageNotFound from '../../images/notfound.png';\nimport {\n    TrendingMoviesList,\n    TrendingLink,\n    TrendingMoviesItem,\n    TrendingMoviesImg,\n    TrendingMoviesText,\n    TrendingMoviesData\n  } from './TrendingMovies.styled';\n\n  const TrendingMovies = ({ movies,location }) => {\n    return (\n      <>\n        <TrendingMoviesList>\n          {movies.map(({ id, posterPath, title, releaseDate }) => (\n            <TrendingLink to={`/movies/${id}`} state={{ from: location }}>\n              <TrendingMoviesItem key={id}>\n                <TrendingMoviesImg\n                   src={\n                    posterPath \n                      ? `https://image.tmdb.org/t/p/w500/${posterPath}`\n                      : imageNotFound\n                  }\n              \n                  alt={title}\n                  width=\"320\"\n                />\n  \n                <TrendingMoviesText>{title}</TrendingMoviesText>\n                <TrendingMoviesData>\n                  {releaseDate ? new Date(releaseDate).getFullYear() : '---'}\n                </TrendingMoviesData>\n              </TrendingMoviesItem>\n            </TrendingLink>\n          ))}\n        </TrendingMoviesList>\n      </>\n    );\n  };\n  \n  TrendingMovies.propTypes = {\n    trending:PropTypes.arrayOf(PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      posterPath: PropTypes.string.isRequired,\n      releaseDate: PropTypes.string.isRequired,\n      title:PropTypes.string.isRequired,\n    }),),\n    location:PropTypes.object.isRequired,\n  \n  }\n  \n  export default TrendingMovies;","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = '7651f4fc4c55634ce2fb0f6883d09fb5';\nconst TRENGING_MOVIES = '/trending/movie/day';\n\nexport const getTrendingMovies = async () => {\n    const { data } = await axios(TRENGING_MOVIES, {\n      params: {\n        api_key: API_KEY,\n      },\n    });\n\n    const moviesResult = movies => {\n        return movies.map(\n          ({ id, title, poster_path: posterPath, release_date: releaseDate }) => ({\n            id,\n            title,\n            posterPath,\n            releaseDate,\n          })\n        );\n      };\n      return moviesResult(data.results);\n    };\n\nexport const getMovieById = async movieId => {\n    const { data } = await axios(`/movie/${movieId}`, {\n          params: {\n            api_key: API_KEY,\n            language: 'en-US',\n          },\n        });\n\n    const {\n            title,\n            poster_path: posterPath,\n            release_date: releaseDate,\n            genres,\n            overview,\n            vote_average: voteAverage,\n          } = data;\n          return { title, posterPath, releaseDate, genres, overview, voteAverage };\n        };\n\nexport const getCast = async movieId => {\n  const { data } = await axios(`/movie/${movieId}/credits`, {\n    params: {\n      api_key: API_KEY,\n      language: 'en-US',\n    },\n  });\n  const actorsResult = actors => {\n    return actors.map(({ id, name, profile_path: profilePath, character }) => ({\n      id,\n      name,\n      profilePath,\n      character,\n    }));\n  };\n  return actorsResult(data.cast);\n};\n\nexport const getReviews = async movieId => {\n    const { data } = await axios(`/movie/${movieId}/reviews`, {\n      params: {\n        api_key: API_KEY,\n        language: 'en-US',\n      },\n    });\n    const reviewsResult = reviews => {\n      return reviews.map(({ id, author, content }) => ({ id, author, content }));\n    };\n    return reviewsResult(data.results);\n  };\n\nexport const getMovies = async query => {\n  const { data } = await axios.get(`/search/movie`, {\n    params: {\n      api_key: API_KEY,\n      language: 'en-US',\n      query,\n      page: 1,\n      include_adult: false,\n    },\n  });\n  const moviesResult = movies => {\n    return movies.map(\n      ({ id, title, poster_path: posterPath, release_date: releaseDate }) => ({\n        id,\n        title,\n        posterPath,\n        releaseDate,\n      })\n    );\n  };\n  return moviesResult(data.results);\n};","import styled from '@emotion/styled';\n\nexport const HomeContainer = styled.div`\n    padding-left: 15px;\n    padding-right: 15px;\n    margin-left: auto;\n    margin-right: auto;\n    max-width: 1250px;\n`\nexport const HomeTitle = styled.h1`\n    text-transform:uppercase;\n    font-weight:700;\n    text-align:center;\n`","import { useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { getTrendingMovies } from 'components/api/Api';\nimport TrendingMovies from 'components/TrendingMovies/TrendingMovies';\nimport { HomeContainer, HomeTitle } from './Home.styled';\n\nconst Home = () => {\n    const [trendingMovies, setTrendingMovies] = useState([]);\n    const location = useLocation();\n    const [, setError] = useState(null);\n    useEffect(() => {\n      getTrendingMovies()\n        .then(setTrendingMovies)\n        .catch(error => setError(error));\n    }, []);\n  \n    return (\n      <HomeContainer>\n        <main>\n          <HomeTitle>Trending movies</HomeTitle>\n          {trendingMovies && (\n            <TrendingMovies movies={trendingMovies} location={location} />\n          )}\n        </main>\n      </HomeContainer>\n    );\n  };\n  \n  export default Home;"],"names":["TrendingMoviesList","styled","TrendingMoviesItem","TrendingMoviesImg","TrendingMoviesText","TrendingMoviesData","TrendingLink","NavLink","movies","location","map","id","posterPath","title","releaseDate","to","state","from","src","imageNotFound","alt","width","Date","getFullYear","axios","API_KEY","getTrendingMovies","params","api_key","data","moviesResult","poster_path","release_date","results","getMovieById","movieId","language","genres","overview","voteAverage","vote_average","getCast","actorsResult","actors","name","profilePath","profile_path","character","cast","getReviews","reviewsResult","reviews","author","content","getMovies","query","page","include_adult","HomeContainer","HomeTitle","useState","trendingMovies","setTrendingMovies","useLocation","setError","useEffect","then","catch","error","TrendingMovies"],"sourceRoot":""}