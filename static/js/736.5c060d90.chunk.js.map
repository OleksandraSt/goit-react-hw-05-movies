{"version":3,"file":"static/js/736.5c060d90.chunk.js","mappings":"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","sources":["components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","components/api/Api.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const CastContainer = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  padding-left: 20px;\n  padding-right: 20px;\n`;\nexport const CastList = styled.ul`\n  list-style: none;\n  display: flex;\n  gap: 32px;\n  flex-wrap: wrap;\n  justify-content: center;\n`;\nexport const CastItem = styled.li`\n  flex-basis: calc((100% - 60px) / 5);\n  box-shadow: rgb(0 0 0 / 12%) 0px 1px 3px, rgb(0 0 0 / 14%) 0px 1px 1px,\n    rgb(0 0 0 / 20%) 0px 2px 1px;\n  border-radius: 6px;\n`;\nexport const ActorName = styled.p`\n  text-transform: uppercase;\n  font-size: 20px;\n  font-weight: 700;\n`;\nexport const CharacterDescription = styled.p`\n  font-size: 20px;\n`;\n\nexport const NoActors = styled.p`\n  text-transform: uppercase;\n  font-size: 40px;\n  font-weight: 700;\n  margin-bottom: 50px;\n`;","import { getCast } from 'components/api/Api';\nimport { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport {\n  CastContainer,\n  CastList,\n  CastItem,\n  ActorName,\n  CharacterDescription,\n  NoActors,\n} from './Cast.styled';\nimport imageNotFound from '../../images/notfound.png';\n\nconst Cast = () => {\n    const [actors, setActors] = useState([]);\n    const { movieId } = useParams();\n    const [error, setError] = useState(null);\n  \n    useEffect(() => {\n      getCast(movieId)\n        .then(actors => {\n          setActors(actors);\n          setError(null);\n        })\n        .catch(error => {\n          setError(error);\n          setActors([]);\n        });\n    }, [movieId, error]);\n  \n    if (!actors) {\n      return;\n    }\n\n    return (\n        <>\n          <CastContainer>\n            <CastList>\n              {actors.map(({ id, name, profilePath, character }) => (\n                <CastItem key={id}>\n                  <img\n                    src={\n                      profilePath !== null\n                        ? `https://image.tmdb.org/t/p/w500/${profilePath}`\n                        : imageNotFound\n                    }\n                    alt={name}\n                    width=\"250\"\n                    height=\"375\"\n                  />\n                  <ActorName>{name} </ActorName>\n                  <CharacterDescription>Character:{character}</CharacterDescription>\n                </CastItem>\n              ))}\n            </CastList>\n          </CastContainer>\n          {actors.length === 0 && !error && (\n            <NoActors>There is no information yet</NoActors>\n          )}\n        </>\n      );\n    };\n    \nexport default Cast;","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = '7651f4fc4c55634ce2fb0f6883d09fb5';\nconst TRENGING_MOVIES = '/trending/movie/day';\n\nexport const getTrendingMovies = async () => {\n    const { data } = await axios(TRENGING_MOVIES, {\n      params: {\n        api_key: API_KEY,\n      },\n    });\n\n    const moviesResult = movies => {\n        return movies.map(\n          ({ id, title, poster_path: posterPath, release_date: releaseDate }) => ({\n            id,\n            title,\n            posterPath,\n            releaseDate,\n          })\n        );\n      };\n      return moviesResult(data.results);\n    };\n\nexport const getMovieById = async movieId => {\n    const { data } = await axios(`/movie/${movieId}`, {\n          params: {\n            api_key: API_KEY,\n            language: 'en-US',\n          },\n        });\n\n    const {\n            title,\n            poster_path: posterPath,\n            release_date: releaseDate,\n            genres,\n            overview,\n            vote_average: voteAverage,\n          } = data;\n          return { title, posterPath, releaseDate, genres, overview, voteAverage };\n        };\n\nexport const getCast = async movieId => {\n  const { data } = await axios(`/movie/${movieId}/credits`, {\n    params: {\n      api_key: API_KEY,\n      language: 'en-US',\n    },\n  });\n  const actorsResult = actors => {\n    return actors.map(({ id, name, profile_path: profilePath, character }) => ({\n      id,\n      name,\n      profilePath,\n      character,\n    }));\n  };\n  return actorsResult(data.cast);\n};\n\nexport const getReviews = async movieId => {\n    const { data } = await axios(`/movie/${movieId}/reviews`, {\n      params: {\n        api_key: API_KEY,\n        language: 'en-US',\n      },\n    });\n    const reviewsResult = reviews => {\n      return reviews.map(({ id, author, content }) => ({ id, author, content }));\n    };\n    return reviewsResult(data.results);\n  };\n\nexport const getMovies = async query => {\n  const { data } = await axios.get(`/search/movie`, {\n    params: {\n      api_key: API_KEY,\n      language: 'en-US',\n      query,\n      page: 1,\n      include_adult: false,\n    },\n  });\n  const moviesResult = movies => {\n    return movies.map(\n      ({ id, title, poster_path: posterPath, release_date: releaseDate }) => ({\n        id,\n        title,\n        posterPath,\n        releaseDate,\n      })\n    );\n  };\n  return moviesResult(data.results);\n};"],"names":["CastContainer","styled","CastList","CastItem","ActorName","CharacterDescription","NoActors","useState","actors","setActors","movieId","useParams","error","setError","useEffect","getCast","then","catch","map","id","name","profilePath","character","src","imageNotFound","alt","width","height","length","axios","API_KEY","getTrendingMovies","params","api_key","data","moviesResult","movies","title","posterPath","poster_path","releaseDate","release_date","results","getMovieById","language","genres","overview","voteAverage","vote_average","actorsResult","profile_path","cast","getReviews","reviewsResult","reviews","author","content","getMovies","query","page","include_adult"],"sourceRoot":""}