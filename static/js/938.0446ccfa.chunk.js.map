{"version":3,"file":"static/js/938.0446ccfa.chunk.js","mappings":"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","sources":["components/TrendingMovies/TrendingMovies.styled.jsx","components/TrendingMovies/TrendingMovies.jsx","components/api/Api.jsx","components/SearchForm/SearchForm.styled.jsx","components/SearchForm/SearchForm.jsx","pages/Movie/Movie.styled.jsx","pages/Movie/Movie.jsx"],"sourcesContent":["import { NavLink } from \"react-router-dom\";\nimport styled from '@emotion/styled';\n\nexport const TrendingMoviesList = styled.ul`\n    display: flex;\n    flex-wrap: wrap;\n    gap: 16px;\n    list-style: none;\n    padding: 0px;\n    margin: 0px;\n    justify-content: center;\n`\nexport const TrendingMoviesItem = styled.li`\n    flex-basis: calc((100% - 60px) / 4);\n    width: 320px;\n    height: 480px;\n    border-radius: 10px;\n    transition-property: box-shadow, transform;\n    transition-duration: 200ms;\n    transition-timing-function: cubic-bezier(0.075, 0.82,  0.165, 1);\n   background: rgb(255,0,44);\n    `\nexport const TrendingMoviesImg = styled.img`\n    width:100%;\n    height: 398px;\n    object-fit: cover;\n    border-radius: 5px;\n`\nexport const TrendingMoviesText = styled.p`\n    margin: 0;\n    padding: 10px;\n    font-weight: 700;\n    text-decoration: none;\n`\nexport const TrendingMoviesData = styled.p`\n    margin:0;\n    font-weight:700;\n    text-decoration: none;\n    padding:0px 10px 0px 10px;\n`\nexport const TrendingLink = styled(NavLink)`\n    text-decoration: none;\n    color: black;\n`","import PropTypes from 'prop-types';\nimport imageNotFound from '../../images/notfound.png';\nimport {\n    TrendingMoviesList,\n    TrendingLink,\n    TrendingMoviesItem,\n    TrendingMoviesImg,\n    TrendingMoviesText,\n    TrendingMoviesData\n  } from './TrendingMovies.styled';\n\n  const TrendingMovies = ({ movies,location }) => {\n    return (\n      <>\n        <TrendingMoviesList>\n          {movies.map(({ id, posterPath, title, releaseDate }) => (\n            <TrendingLink to={`/movies/${id}`} state={{ from: location }}>\n              <TrendingMoviesItem key={id}>\n                <TrendingMoviesImg\n                   src={\n                    posterPath \n                      ? `https://image.tmdb.org/t/p/w500/${posterPath}`\n                      : imageNotFound\n                  }\n              \n                  alt={title}\n                  width=\"320\"\n                />\n  \n                <TrendingMoviesText>{title}</TrendingMoviesText>\n                <TrendingMoviesData>\n                  {releaseDate ? new Date(releaseDate).getFullYear() : '---'}\n                </TrendingMoviesData>\n              </TrendingMoviesItem>\n            </TrendingLink>\n          ))}\n        </TrendingMoviesList>\n      </>\n    );\n  };\n  \n  TrendingMovies.propTypes = {\n    trending:PropTypes.arrayOf(PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      posterPath: PropTypes.string.isRequired,\n      releaseDate: PropTypes.string.isRequired,\n      title:PropTypes.string.isRequired,\n    }),),\n    location:PropTypes.object.isRequired,\n  \n  }\n  \n  export default TrendingMovies;","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = '7651f4fc4c55634ce2fb0f6883d09fb5';\nconst TRENGING_MOVIES = '/trending/movie/day';\n\nexport const getTrendingMovies = async () => {\n    const { data } = await axios(TRENGING_MOVIES, {\n      params: {\n        api_key: API_KEY,\n      },\n    });\n\n    const moviesResult = movies => {\n        return movies.map(\n          ({ id, title, poster_path: posterPath, release_date: releaseDate }) => ({\n            id,\n            title,\n            posterPath,\n            releaseDate,\n          })\n        );\n      };\n      return moviesResult(data.results);\n    };\n\nexport const getMovieById = async movieId => {\n    const { data } = await axios(`/movie/${movieId}`, {\n          params: {\n            api_key: API_KEY,\n            language: 'en-US',\n          },\n        });\n\n    const {\n            title,\n            poster_path: posterPath,\n            release_date: releaseDate,\n            genres,\n            overview,\n            vote_average: voteAverage,\n          } = data;\n          return { title, posterPath, releaseDate, genres, overview, voteAverage };\n        };\n\nexport const getCast = async movieId => {\n  const { data } = await axios(`/movie/${movieId}/credits`, {\n    params: {\n      api_key: API_KEY,\n      language: 'en-US',\n    },\n  });\n  const actorsResult = actors => {\n    return actors.map(({ id, name, profile_path: profilePath, character }) => ({\n      id,\n      name,\n      profilePath,\n      character,\n    }));\n  };\n  return actorsResult(data.cast);\n};\n\nexport const getReviews = async movieId => {\n    const { data } = await axios(`/movie/${movieId}/reviews`, {\n      params: {\n        api_key: API_KEY,\n        language: 'en-US',\n      },\n    });\n    const reviewsResult = reviews => {\n      return reviews.map(({ id, author, content }) => ({ id, author, content }));\n    };\n    return reviewsResult(data.results);\n  };\n\nexport const getMovies = async query => {\n  const { data } = await axios.get(`/search/movie`, {\n    params: {\n      api_key: API_KEY,\n      language: 'en-US',\n      query,\n      page: 1,\n      include_adult: false,\n    },\n  });\n  const moviesResult = movies => {\n    return movies.map(\n      ({ id, title, poster_path: posterPath, release_date: releaseDate }) => ({\n        id,\n        title,\n        posterPath,\n        releaseDate,\n      })\n    );\n  };\n  return moviesResult(data.results);\n};","import styled from '@emotion/styled';\n\nexport const Form = styled.form`\n    display: flex;\n    gap: 20px;\n    justify-content: center;\n    margin-bottom: 16px;\n`\nexport const Input = styled.input`\n    padding: 10px;\n    width: 500px;\n    height: 26px;\n    font-weight: 700;\n`\nexport const SearchButton = styled.button`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    gap: 8px;\n    border: none;\n    padding-left: 20px;\n    padding-right: 20px;\n      background: rgb(255,0,44);\n    border-radius: 4px;\n    font-weight: 600;\n    cursor: pointer;\n    color:white;\n    text-transform: uppercase;\n`","import PropTypes from 'prop-types';\nimport {Form,Input,SearchButton } from './SearchForm.styled';\n\nconst SearchForm = ({ onSubmit, value }) => {\n    \n    const handleSubmit = e => {\n      e.preventDefault();\n       const form = e.target;\n      onSubmit(form.elements.query.value);\n      form.reset();\n    };\n  \n      return (\n             <>\n        <Form onSubmit={handleSubmit}>\n          <Input type=\"text\" name=\"query\" defaultValue={value}/>\n          <SearchButton type=\"submit\">Search</SearchButton>\n        </Form>\n        \n      </>\n      )\n  }\n\n  SearchForm.propTypes = {\n    onSubmit: PropTypes.func.isRequired,\n    value: PropTypes.string.isRequired,\n  };\n  \n  export default SearchForm;","import styled from '@emotion/styled';\n\nexport const MovieTitle = styled.h1`\n  font-size: 30px;\n  font-weight: 700;\n  text-align: center;\n  text-transform: uppercase;\n  margin: 0;\n  padding: 15px;\n`;","import { useState, useEffect } from 'react';\nimport { useSearchParams, useLocation } from 'react-router-dom';\nimport SearchForm from 'components/SearchForm/SearchForm';\nimport { getMovies } from 'components/api/Api';\nimport TrendingMovies from 'components/TrendingMovies/TrendingMovies';\nimport { MovieTitle } from './Movie.styled';\n\nconst Movie = () => {\n    const [searchMovies, setSearchMovies] = useState([]);\n    const [, setError] = useState(null);\n    const [searchParams, setSearchParams] = useSearchParams();\n    const searchQuery = searchParams.get('query') ?? '';\n    const location = useLocation();\n    useEffect(() => {\n      if (!searchQuery) {\n        setSearchMovies([]);\n        return;\n      }\n      if (searchQuery.trim() === '' || searchQuery === '') {\n        alert('Please, enter a valid query');\n        return;\n      }\n      getMovies(searchQuery.toLowerCase().trim())\n        .then(movies => {\n          setSearchMovies(movies);\n          if (movies.length === 0) {\n            alert('Sorry, there are no movies that fit this search');\n          }\n          setError(null);\n        })\n        .catch(error => {\n          console.log(error.message);\n          setSearchMovies([]);\n          setError(error);\n        });\n    }, [searchQuery]);\n  \n    const onSubmit = value => {\n      setSearchParams(value !== '' ? { query: value } : {});\n    };\n  \n    return (\n      <main>\n        <section>\n          <MovieTitle>Search movies</MovieTitle>\n          <SearchForm onSubmit={onSubmit} value={searchQuery} />\n          {searchMovies?.length > 0 && (\n            <TrendingMovies movies={searchMovies} location={location} />\n          )}\n        </section>\n      </main>\n    );\n  };\n  \n  export default Movie;"],"names":["TrendingMoviesList","styled","TrendingMoviesItem","TrendingMoviesImg","TrendingMoviesText","TrendingMoviesData","TrendingLink","NavLink","movies","location","map","id","posterPath","title","releaseDate","to","state","from","src","imageNotFound","alt","width","Date","getFullYear","axios","API_KEY","getTrendingMovies","params","api_key","data","moviesResult","poster_path","release_date","results","getMovieById","movieId","language","genres","overview","voteAverage","vote_average","getCast","actorsResult","actors","name","profilePath","profile_path","character","cast","getReviews","reviewsResult","reviews","author","content","getMovies","query","page","include_adult","Form","Input","SearchButton","onSubmit","value","e","preventDefault","form","target","elements","reset","type","defaultValue","MovieTitle","useState","searchMovies","setSearchMovies","setError","useSearchParams","searchParams","setSearchParams","searchQuery","get","useLocation","useEffect","trim","toLowerCase","then","length","alert","catch","error","console","log","message","TrendingMovies"],"sourceRoot":""}